# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration
#
# Lines starting with "#" are comments.
# Configuration options are organized into tables and keys.
# See documentation for more information on available options.

[remote.github]
owner = "stanfordnlp"
repo = "dspy"

[changelog]
# template for the changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}

{% macro print_commit(commit) -%}\
    - {% if commit.scope %}**({{ commit.scope }})**: {% endif %}\
        {{ commit.message | upper_first }} - \
        ([{{ commit.id | truncate(length=7, end="") }}]({{ self::remote_url() }}/commit/{{ commit.id }}))\
    {% for footer in commit.footers %}
        {% if footer.token == "BREAKING CHANGE" %}  - **BREAKING**: {{ footer.value }} {% endif %}\
        {% if footer.token == "CONTEXT" %}  - **context**: {{ footer.value }} {% endif %}\
    {% endfor %}\
{% endmacro -%}\


{% if version %}\
    {% if previous.version %}
        ## [{{ version | trim_start_matches(pat="v") }}]\
          ({{ self::remote_url() }}/compare/{{ previous.version }}..{{ version }}) - {{ timestamp | date(format="%Y-%m-%d") }}
    {% else %}\
        ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
    {% endif %}\
{% else %}\
    ## [unreleased]
{% endif %}\

{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits
    | filter(attribute="scope")
    | sort(attribute="scope") %}
        {{ self::print_commit(commit=commit) }}
    {%- endfor %}
    {% for commit in commits %}
        {%- if not commit.scope -%}
            {{ self::print_commit(commit=commit) }}
        {% endif -%}
    {% endfor -%}
{% endfor -%}


"""
# template for the changelog footer
footer = """
<!-- generated by git-cliff -->
"""
# remove the leading and trailing s
trim = true
# postprocessors
postprocessors = [
  { pattern = '<REPO>', replace = "https://github.com/stanfordnlp/dspy" }, # replace repository URL
]

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
  { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](<REPO>/issues/${2}))" },
  # Check spelling of the commit with https://github.com/crate-ci/typos
  # If the spelling is incorrect, it will be automatically fixed.
  # { pattern = '.*', replace_command = 'typos --write-changes -' },
]
# regex for parsing and grouping commits
commit_parsers = [
  { message = ".*BREAKING", group = "<!-- 0 -->🟡 BREAKING CHANGES" },
  { message = "^feat", group = "<!-- 1 -->🚀  Features" },
  { message = "^fix", group = "<!-- 2 -->💊  Bug Fixes" },
  { message = "^test", group = "<!-- 3 -->🧪  Testing" },
  { message = "^ci", group = "<!-- 4 -->🛠  Continuous Integration" },
  { message = "^perf", group = "<!-- 5 -->⚡️  Performance" },
  { body = ".*security", group = "<!-- 6 -->🛡️  Security" },
  { message = "^refactor", group = "<!-- 7 -->🚜  Refactor" },
  { message = "^chore", group = "<!-- 8 -->⚙️  Chore" },
  { message = "^style", group = "<!-- 9 -->🎨 Styling" },
  { message = "^doc", group = "<!-- 10 -->📚 Documentation" },
  { message = "^revert", group = "<!-- 11 -->⏪ Revert" },
  { body = ".*revert", group = "<!-- 12 -->⏪ Revert" }
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = true
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "newest"
